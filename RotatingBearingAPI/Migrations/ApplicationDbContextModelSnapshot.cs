// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RotatingBearingAPI.Data;

#nullable disable

namespace RotatingBearingAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RotatingBearingAPI.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("RotationSpeed")
                        .HasColumnType("float");

                    b.Property<double>("StressLevel")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("TestSequenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestSequenceId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestSequences");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<double>("Setpoint")
                        .HasColumnType("float");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<int>("TestSequenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestSequenceId");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestResult", b =>
                {
                    b.HasOne("RotatingBearingAPI.Models.TestSequence", "TestSequence")
                        .WithMany()
                        .HasForeignKey("TestSequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSequence");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestStep", b =>
                {
                    b.HasOne("RotatingBearingAPI.Models.TestSequence", "TestSequence")
                        .WithMany("Steps")
                        .HasForeignKey("TestSequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSequence");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestSequence", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
