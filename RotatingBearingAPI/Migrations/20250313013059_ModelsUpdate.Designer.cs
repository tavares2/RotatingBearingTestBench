// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RotatingBearingAPI.Data;

#nullable disable

namespace RotatingBearingAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250313013059_ModelsUpdate")]
    partial class ModelsUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RotatingBearingAPI.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("RotationSpeed")
                        .HasColumnType("float");

                    b.Property<double>("StressLevel")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("TestSequenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestSequenceId");

                    b.ToTable("TestResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RotationSpeed = 1500.0,
                            StressLevel = 8.5,
                            Temperature = 60.0,
                            TestSequenceId = 1,
                            Timestamp = new DateTime(2025, 3, 12, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            RotationSpeed = 1200.0,
                            StressLevel = 6.7000000000000002,
                            Temperature = 55.299999999999997,
                            TestSequenceId = 2,
                            Timestamp = new DateTime(2025, 3, 12, 10, 40, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestSequences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Test Sequence 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Test Sequence 2"
                        });
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<double>("Setpoint")
                        .HasColumnType("float");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<int>("TestSequenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestSequenceId");

                    b.ToTable("TestSteps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 10,
                            Setpoint = 500.0,
                            StepNumber = 1,
                            TestSequenceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration = 15,
                            Setpoint = 1000.0,
                            StepNumber = 2,
                            TestSequenceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Duration = 12,
                            Setpoint = 800.0,
                            StepNumber = 1,
                            TestSequenceId = 2
                        });
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestResult", b =>
                {
                    b.HasOne("RotatingBearingAPI.Models.TestSequence", "TestSequence")
                        .WithMany()
                        .HasForeignKey("TestSequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSequence");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestStep", b =>
                {
                    b.HasOne("RotatingBearingAPI.Models.TestSequence", "TestSequence")
                        .WithMany("Steps")
                        .HasForeignKey("TestSequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSequence");
                });

            modelBuilder.Entity("RotatingBearingAPI.Models.TestSequence", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
